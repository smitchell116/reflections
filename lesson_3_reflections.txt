1) When would you want to use a remote repository rather than keeping all your work local?

You would want to use a remote repository for projects that have multiple collaborators, making it easier for others to obtain clones of the project and contribute to the project. Also, a remote repository serves as a backup in case something happens to your local repository, or you want or need to switch computers for some reason.

2) Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Having Git auto-update with your remote might be okay if you knew you were the only one working on that particular project, but oftentimes there are multiple people working on the same project and contributing their own changes. It's possible someone may have altered the code in such a way as to conflict with the code you're currently trying to implement. With manual pulls it is easier to catch such problems beforehand.

3) Describe the difference between forks, clones, and branches. When would you use one instead of another?

A clone is a copy of an entire repository, usually from a remote repository to your local machine. A fork is a kind of clone, only it's a copy of a repository made from one GitHub user's account to another and exists on the GitHub server. A branch is a particular chain of commits that exist on a repository that are separate from other commit chains on the repository. You use clone when you want a copy of a remote repository on your machine to work with. You fork when you want to create a modified version of another person's project but aren't allowed to make changes to their repository. You branch when you want to make modifications to your own project but don't want to adversely affect what you've already done.

4) What is the benefit of having a copy of the last known state of the remote stored locally?

Having the last known state of the remote stored locally can help you keep track of whether or not any changes were made to the remote since the last time you pushed a commit, making it easier to both catch and resolve conflicts when it comes time to update your code.

5) How would you collaborate without using Git or GitHub? What would be easier? What would be harder?

Without using Git or GitHub, you could collaborate by emailing code back and forth, staying in constant communication with coworkers to keep track of what changes are being made, slightly changing the name of the files each time to maintain old versions, using diff -u to compare files, etc. It might be easier in that people wouldn't have to learn how to use Git and GitHub, but it would also be a lot more labor intensive.